// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: misc/common.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "misc";
function createBaseHttpHeader() {
    return { name: undefined, value: undefined };
}
export const HttpHeader = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== undefined) {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            value: isSet(object.value) ? globalThis.String(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return HttpHeader.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHttpHeader();
        message.name = object.name ?? undefined;
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseFormatId() {
    return { itag: undefined, lastModified: undefined, xtags: undefined };
}
export const FormatId = {
    encode(message, writer = new BinaryWriter()) {
        if (message.itag !== undefined) {
            writer.uint32(8).int32(message.itag);
        }
        if (message.lastModified !== undefined) {
            writer.uint32(16).uint64(message.lastModified);
        }
        if (message.xtags !== undefined) {
            writer.uint32(26).string(message.xtags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormatId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.itag = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.lastModified = longToNumber(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.xtags = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itag: isSet(object.itag) ? globalThis.Number(object.itag) : undefined,
            lastModified: isSet(object.lastModified) ? globalThis.Number(object.lastModified) : undefined,
            xtags: isSet(object.xtags) ? globalThis.String(object.xtags) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itag !== undefined) {
            obj.itag = Math.round(message.itag);
        }
        if (message.lastModified !== undefined) {
            obj.lastModified = Math.round(message.lastModified);
        }
        if (message.xtags !== undefined) {
            obj.xtags = message.xtags;
        }
        return obj;
    },
    create(base) {
        return FormatId.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFormatId();
        message.itag = object.itag ?? undefined;
        message.lastModified = object.lastModified ?? undefined;
        message.xtags = object.xtags ?? undefined;
        return message;
    },
};
function createBaseInitRange() {
    return { start: undefined, end: undefined };
}
export const InitRange = {
    encode(message, writer = new BinaryWriter()) {
        if (message.start !== undefined) {
            writer.uint32(8).int32(message.start);
        }
        if (message.end !== undefined) {
            writer.uint32(16).int32(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.start = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.end = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? globalThis.Number(object.start) : undefined,
            end: isSet(object.end) ? globalThis.Number(object.end) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.start !== undefined) {
            obj.start = Math.round(message.start);
        }
        if (message.end !== undefined) {
            obj.end = Math.round(message.end);
        }
        return obj;
    },
    create(base) {
        return InitRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInitRange();
        message.start = object.start ?? undefined;
        message.end = object.end ?? undefined;
        return message;
    },
};
function createBaseIndexRange() {
    return { start: undefined, end: undefined };
}
export const IndexRange = {
    encode(message, writer = new BinaryWriter()) {
        if (message.start !== undefined) {
            writer.uint32(8).int32(message.start);
        }
        if (message.end !== undefined) {
            writer.uint32(16).int32(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIndexRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.start = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.end = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? globalThis.Number(object.start) : undefined,
            end: isSet(object.end) ? globalThis.Number(object.end) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.start !== undefined) {
            obj.start = Math.round(message.start);
        }
        if (message.end !== undefined) {
            obj.end = Math.round(message.end);
        }
        return obj;
    },
    create(base) {
        return IndexRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIndexRange();
        message.start = object.start ?? undefined;
        message.end = object.end ?? undefined;
        return message;
    },
};
function createBaseKeyValuePair() {
    return { key: undefined, value: undefined };
}
export const KeyValuePair = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== undefined) {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyValuePair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : undefined,
            value: isSet(object.value) ? globalThis.String(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== undefined) {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return KeyValuePair.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyValuePair();
        message.key = object.key ?? undefined;
        message.value = object.value ?? undefined;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

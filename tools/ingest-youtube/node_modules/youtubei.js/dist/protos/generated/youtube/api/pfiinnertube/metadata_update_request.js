// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/metadata_update_request.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { InnerTubeContext } from "./innertube_context.js";
export const protobufPackage = "youtube.api.pfiinnertube";
function createBaseMetadataUpdateRequest() {
    return {
        context: undefined,
        encryptedVideoId: undefined,
        title: undefined,
        description: undefined,
        privacy: undefined,
        tags: undefined,
        category: undefined,
        license: undefined,
        ageRestriction: undefined,
        videoStill: undefined,
        madeForKids: undefined,
        racy: undefined,
    };
}
export const MetadataUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.context !== undefined) {
            InnerTubeContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.encryptedVideoId !== undefined) {
            writer.uint32(18).string(message.encryptedVideoId);
        }
        if (message.title !== undefined) {
            MetadataUpdateRequest_MdeTitleUpdateRequest.encode(message.title, writer.uint32(26).fork()).join();
        }
        if (message.description !== undefined) {
            MetadataUpdateRequest_MdeDescriptionUpdateRequest.encode(message.description, writer.uint32(34).fork()).join();
        }
        if (message.privacy !== undefined) {
            MetadataUpdateRequest_MdePrivacyUpdateRequest.encode(message.privacy, writer.uint32(42).fork()).join();
        }
        if (message.tags !== undefined) {
            MetadataUpdateRequest_MdeTagsUpdateRequest.encode(message.tags, writer.uint32(50).fork()).join();
        }
        if (message.category !== undefined) {
            MetadataUpdateRequest_MdeCategoryUpdateRequest.encode(message.category, writer.uint32(58).fork()).join();
        }
        if (message.license !== undefined) {
            MetadataUpdateRequest_MdeLicenseUpdateRequest.encode(message.license, writer.uint32(66).fork()).join();
        }
        if (message.ageRestriction !== undefined) {
            MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.encode(message.ageRestriction, writer.uint32(90).fork())
                .join();
        }
        if (message.videoStill !== undefined) {
            MetadataUpdateRequest_MdeVideoStillRequestParams.encode(message.videoStill, writer.uint32(162).fork()).join();
        }
        if (message.madeForKids !== undefined) {
            MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.encode(message.madeForKids, writer.uint32(546).fork())
                .join();
        }
        if (message.racy !== undefined) {
            MetadataUpdateRequest_MdeRacyRequestParams.encode(message.racy, writer.uint32(554).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = InnerTubeContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.encryptedVideoId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.title = MetadataUpdateRequest_MdeTitleUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = MetadataUpdateRequest_MdeDescriptionUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.privacy = MetadataUpdateRequest_MdePrivacyUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tags = MetadataUpdateRequest_MdeTagsUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.category = MetadataUpdateRequest_MdeCategoryUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.license = MetadataUpdateRequest_MdeLicenseUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.ageRestriction = MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.videoStill = MetadataUpdateRequest_MdeVideoStillRequestParams.decode(reader, reader.uint32());
                    continue;
                case 68:
                    if (tag !== 546) {
                        break;
                    }
                    message.madeForKids = MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.decode(reader, reader.uint32());
                    continue;
                case 69:
                    if (tag !== 554) {
                        break;
                    }
                    message.racy = MetadataUpdateRequest_MdeRacyRequestParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? InnerTubeContext.fromJSON(object.context) : undefined,
            encryptedVideoId: isSet(object.encryptedVideoId) ? globalThis.String(object.encryptedVideoId) : undefined,
            title: isSet(object.title) ? MetadataUpdateRequest_MdeTitleUpdateRequest.fromJSON(object.title) : undefined,
            description: isSet(object.description)
                ? MetadataUpdateRequest_MdeDescriptionUpdateRequest.fromJSON(object.description)
                : undefined,
            privacy: isSet(object.privacy)
                ? MetadataUpdateRequest_MdePrivacyUpdateRequest.fromJSON(object.privacy)
                : undefined,
            tags: isSet(object.tags) ? MetadataUpdateRequest_MdeTagsUpdateRequest.fromJSON(object.tags) : undefined,
            category: isSet(object.category)
                ? MetadataUpdateRequest_MdeCategoryUpdateRequest.fromJSON(object.category)
                : undefined,
            license: isSet(object.license)
                ? MetadataUpdateRequest_MdeLicenseUpdateRequest.fromJSON(object.license)
                : undefined,
            ageRestriction: isSet(object.ageRestriction)
                ? MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.fromJSON(object.ageRestriction)
                : undefined,
            videoStill: isSet(object.videoStill)
                ? MetadataUpdateRequest_MdeVideoStillRequestParams.fromJSON(object.videoStill)
                : undefined,
            madeForKids: isSet(object.madeForKids)
                ? MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.fromJSON(object.madeForKids)
                : undefined,
            racy: isSet(object.racy) ? MetadataUpdateRequest_MdeRacyRequestParams.fromJSON(object.racy) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = InnerTubeContext.toJSON(message.context);
        }
        if (message.encryptedVideoId !== undefined) {
            obj.encryptedVideoId = message.encryptedVideoId;
        }
        if (message.title !== undefined) {
            obj.title = MetadataUpdateRequest_MdeTitleUpdateRequest.toJSON(message.title);
        }
        if (message.description !== undefined) {
            obj.description = MetadataUpdateRequest_MdeDescriptionUpdateRequest.toJSON(message.description);
        }
        if (message.privacy !== undefined) {
            obj.privacy = MetadataUpdateRequest_MdePrivacyUpdateRequest.toJSON(message.privacy);
        }
        if (message.tags !== undefined) {
            obj.tags = MetadataUpdateRequest_MdeTagsUpdateRequest.toJSON(message.tags);
        }
        if (message.category !== undefined) {
            obj.category = MetadataUpdateRequest_MdeCategoryUpdateRequest.toJSON(message.category);
        }
        if (message.license !== undefined) {
            obj.license = MetadataUpdateRequest_MdeLicenseUpdateRequest.toJSON(message.license);
        }
        if (message.ageRestriction !== undefined) {
            obj.ageRestriction = MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.toJSON(message.ageRestriction);
        }
        if (message.videoStill !== undefined) {
            obj.videoStill = MetadataUpdateRequest_MdeVideoStillRequestParams.toJSON(message.videoStill);
        }
        if (message.madeForKids !== undefined) {
            obj.madeForKids = MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.toJSON(message.madeForKids);
        }
        if (message.racy !== undefined) {
            obj.racy = MetadataUpdateRequest_MdeRacyRequestParams.toJSON(message.racy);
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? InnerTubeContext.fromPartial(object.context)
            : undefined;
        message.encryptedVideoId = object.encryptedVideoId ?? undefined;
        message.title = (object.title !== undefined && object.title !== null)
            ? MetadataUpdateRequest_MdeTitleUpdateRequest.fromPartial(object.title)
            : undefined;
        message.description = (object.description !== undefined && object.description !== null)
            ? MetadataUpdateRequest_MdeDescriptionUpdateRequest.fromPartial(object.description)
            : undefined;
        message.privacy = (object.privacy !== undefined && object.privacy !== null)
            ? MetadataUpdateRequest_MdePrivacyUpdateRequest.fromPartial(object.privacy)
            : undefined;
        message.tags = (object.tags !== undefined && object.tags !== null)
            ? MetadataUpdateRequest_MdeTagsUpdateRequest.fromPartial(object.tags)
            : undefined;
        message.category = (object.category !== undefined && object.category !== null)
            ? MetadataUpdateRequest_MdeCategoryUpdateRequest.fromPartial(object.category)
            : undefined;
        message.license = (object.license !== undefined && object.license !== null)
            ? MetadataUpdateRequest_MdeLicenseUpdateRequest.fromPartial(object.license)
            : undefined;
        message.ageRestriction = (object.ageRestriction !== undefined && object.ageRestriction !== null)
            ? MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.fromPartial(object.ageRestriction)
            : undefined;
        message.videoStill = (object.videoStill !== undefined && object.videoStill !== null)
            ? MetadataUpdateRequest_MdeVideoStillRequestParams.fromPartial(object.videoStill)
            : undefined;
        message.madeForKids = (object.madeForKids !== undefined && object.madeForKids !== null)
            ? MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.fromPartial(object.madeForKids)
            : undefined;
        message.racy = (object.racy !== undefined && object.racy !== null)
            ? MetadataUpdateRequest_MdeRacyRequestParams.fromPartial(object.racy)
            : undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeTitleUpdateRequest() {
    return { newTitle: undefined };
}
export const MetadataUpdateRequest_MdeTitleUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newTitle !== undefined) {
            writer.uint32(10).string(message.newTitle);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeTitleUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newTitle = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newTitle: isSet(object.newTitle) ? globalThis.String(object.newTitle) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.newTitle !== undefined) {
            obj.newTitle = message.newTitle;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeTitleUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeTitleUpdateRequest();
        message.newTitle = object.newTitle ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeDescriptionUpdateRequest() {
    return { newDescription: undefined };
}
export const MetadataUpdateRequest_MdeDescriptionUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newDescription !== undefined) {
            writer.uint32(10).string(message.newDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeDescriptionUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newDescription = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newDescription: isSet(object.newDescription) ? globalThis.String(object.newDescription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.newDescription !== undefined) {
            obj.newDescription = message.newDescription;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeDescriptionUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeDescriptionUpdateRequest();
        message.newDescription = object.newDescription ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdePrivacyUpdateRequest() {
    return { newPrivacy: undefined, clearPrivacyDraft: undefined };
}
export const MetadataUpdateRequest_MdePrivacyUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newPrivacy !== undefined) {
            writer.uint32(8).int32(message.newPrivacy);
        }
        if (message.clearPrivacyDraft !== undefined) {
            writer.uint32(16).bool(message.clearPrivacyDraft);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdePrivacyUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newPrivacy = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.clearPrivacyDraft = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            newPrivacy: isSet(object.newPrivacy) ? globalThis.Number(object.newPrivacy) : undefined,
            clearPrivacyDraft: isSet(object.clearPrivacyDraft) ? globalThis.Boolean(object.clearPrivacyDraft) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.newPrivacy !== undefined) {
            obj.newPrivacy = Math.round(message.newPrivacy);
        }
        if (message.clearPrivacyDraft !== undefined) {
            obj.clearPrivacyDraft = message.clearPrivacyDraft;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdePrivacyUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdePrivacyUpdateRequest();
        message.newPrivacy = object.newPrivacy ?? undefined;
        message.clearPrivacyDraft = object.clearPrivacyDraft ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeTagsUpdateRequest() {
    return { newTags: [] };
}
export const MetadataUpdateRequest_MdeTagsUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.newTags) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeTagsUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newTags.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            newTags: globalThis.Array.isArray(object?.newTags) ? object.newTags.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.newTags?.length) {
            obj.newTags = message.newTags;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeTagsUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeTagsUpdateRequest();
        message.newTags = object.newTags?.map((e) => e) || [];
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeCategoryUpdateRequest() {
    return { newCategoryId: undefined };
}
export const MetadataUpdateRequest_MdeCategoryUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newCategoryId !== undefined) {
            writer.uint32(8).int32(message.newCategoryId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeCategoryUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newCategoryId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newCategoryId: isSet(object.newCategoryId) ? globalThis.Number(object.newCategoryId) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.newCategoryId !== undefined) {
            obj.newCategoryId = Math.round(message.newCategoryId);
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeCategoryUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeCategoryUpdateRequest();
        message.newCategoryId = object.newCategoryId ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeLicenseUpdateRequest() {
    return { newLicenseId: undefined };
}
export const MetadataUpdateRequest_MdeLicenseUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newLicenseId !== undefined) {
            writer.uint32(10).string(message.newLicenseId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeLicenseUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newLicenseId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newLicenseId: isSet(object.newLicenseId) ? globalThis.String(object.newLicenseId) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.newLicenseId !== undefined) {
            obj.newLicenseId = message.newLicenseId;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeLicenseUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeLicenseUpdateRequest();
        message.newLicenseId = object.newLicenseId ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams() {
    return { operation: undefined, newMfk: undefined };
}
export const MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.operation !== undefined) {
            writer.uint32(8).int32(message.operation);
        }
        if (message.newMfk !== undefined) {
            writer.uint32(16).int32(message.newMfk);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.operation = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.newMfk = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operation: isSet(object.operation) ? globalThis.Number(object.operation) : undefined,
            newMfk: isSet(object.newMfk) ? globalThis.Number(object.newMfk) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.operation !== undefined) {
            obj.operation = Math.round(message.operation);
        }
        if (message.newMfk !== undefined) {
            obj.newMfk = Math.round(message.newMfk);
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeMadeForKidsUpdateRequestParams();
        message.operation = object.operation ?? undefined;
        message.newMfk = object.newMfk ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeRacyRequestParams() {
    return { operation: undefined, newRacy: undefined };
}
export const MetadataUpdateRequest_MdeRacyRequestParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.operation !== undefined) {
            writer.uint32(8).int32(message.operation);
        }
        if (message.newRacy !== undefined) {
            writer.uint32(16).int32(message.newRacy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeRacyRequestParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.operation = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.newRacy = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operation: isSet(object.operation) ? globalThis.Number(object.operation) : undefined,
            newRacy: isSet(object.newRacy) ? globalThis.Number(object.newRacy) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.operation !== undefined) {
            obj.operation = Math.round(message.operation);
        }
        if (message.newRacy !== undefined) {
            obj.newRacy = Math.round(message.newRacy);
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeRacyRequestParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeRacyRequestParams();
        message.operation = object.operation ?? undefined;
        message.newRacy = object.newRacy ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeAgeRestrictionUpdateRequest() {
    return { newIsAgeRestricted: undefined };
}
export const MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.newIsAgeRestricted !== undefined) {
            writer.uint32(8).bool(message.newIsAgeRestricted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeAgeRestrictionUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newIsAgeRestricted = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            newIsAgeRestricted: isSet(object.newIsAgeRestricted) ? globalThis.Boolean(object.newIsAgeRestricted) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.newIsAgeRestricted !== undefined) {
            obj.newIsAgeRestricted = message.newIsAgeRestricted;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeAgeRestrictionUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeAgeRestrictionUpdateRequest();
        message.newIsAgeRestricted = object.newIsAgeRestricted ?? undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeVideoStillRequestParams() {
    return { operation: undefined, newStillId: undefined, image: undefined, testImage: undefined, experimentImage: [] };
}
export const MetadataUpdateRequest_MdeVideoStillRequestParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.operation !== undefined) {
            writer.uint32(8).int32(message.operation);
        }
        if (message.newStillId !== undefined) {
            writer.uint32(16).int32(message.newStillId);
        }
        if (message.image !== undefined) {
            MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.encode(message.image, writer.uint32(26).fork()).join();
        }
        if (message.testImage !== undefined) {
            MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.encode(message.testImage, writer.uint32(34).fork()).join();
        }
        for (const v of message.experimentImage) {
            MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.encode(v, writer.uint32(50).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.operation = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.newStillId = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.image = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.testImage = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.experimentImage.push(MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operation: isSet(object.operation) ? globalThis.Number(object.operation) : undefined,
            newStillId: isSet(object.newStillId) ? globalThis.Number(object.newStillId) : undefined,
            image: isSet(object.image)
                ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromJSON(object.image)
                : undefined,
            testImage: isSet(object.testImage)
                ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromJSON(object.testImage)
                : undefined,
            experimentImage: globalThis.Array.isArray(object?.experimentImage)
                ? object.experimentImage.map((e) => MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.operation !== undefined) {
            obj.operation = Math.round(message.operation);
        }
        if (message.newStillId !== undefined) {
            obj.newStillId = Math.round(message.newStillId);
        }
        if (message.image !== undefined) {
            obj.image = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.toJSON(message.image);
        }
        if (message.testImage !== undefined) {
            obj.testImage = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.toJSON(message.testImage);
        }
        if (message.experimentImage?.length) {
            obj.experimentImage = message.experimentImage.map((e) => MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeVideoStillRequestParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams();
        message.operation = object.operation ?? undefined;
        message.newStillId = object.newStillId ?? undefined;
        message.image = (object.image !== undefined && object.image !== null)
            ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromPartial(object.image)
            : undefined;
        message.testImage = (object.testImage !== undefined && object.testImage !== null)
            ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromPartial(object.testImage)
            : undefined;
        message.experimentImage =
            object.experimentImage?.map((e) => MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData() {
    return { image: undefined };
}
export const MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.image !== undefined) {
            MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.encode(message.image, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.image = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            image: isSet(object.image)
                ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromJSON(object.image)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.image !== undefined) {
            obj.image = MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.toJSON(message.image);
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_ThumbnailExperimentImageData();
        message.image = (object.image !== undefined && object.image !== null)
            ? MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromPartial(object.image)
            : undefined;
        return message;
    },
};
function createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage() {
    return { rawBytes: undefined, dataUri: undefined, frameTimestampUs: undefined, isVertical: undefined };
}
export const MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage = {
    encode(message, writer = new BinaryWriter()) {
        if (message.rawBytes !== undefined) {
            writer.uint32(10).bytes(message.rawBytes);
        }
        if (message.dataUri !== undefined) {
            writer.uint32(18).string(message.dataUri);
        }
        if (message.frameTimestampUs !== undefined) {
            writer.uint32(32).int64(message.frameTimestampUs);
        }
        if (message.isVertical !== undefined) {
            writer.uint32(40).bool(message.isVertical);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rawBytes = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dataUri = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.frameTimestampUs = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isVertical = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rawBytes: isSet(object.rawBytes) ? bytesFromBase64(object.rawBytes) : undefined,
            dataUri: isSet(object.dataUri) ? globalThis.String(object.dataUri) : undefined,
            frameTimestampUs: isSet(object.frameTimestampUs) ? globalThis.Number(object.frameTimestampUs) : undefined,
            isVertical: isSet(object.isVertical) ? globalThis.Boolean(object.isVertical) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rawBytes !== undefined) {
            obj.rawBytes = base64FromBytes(message.rawBytes);
        }
        if (message.dataUri !== undefined) {
            obj.dataUri = message.dataUri;
        }
        if (message.frameTimestampUs !== undefined) {
            obj.frameTimestampUs = Math.round(message.frameTimestampUs);
        }
        if (message.isVertical !== undefined) {
            obj.isVertical = message.isVertical;
        }
        return obj;
    },
    create(base) {
        return MetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadataUpdateRequest_MdeVideoStillRequestParams_CustomThumbnailImage();
        message.rawBytes = object.rawBytes ?? undefined;
        message.dataUri = object.dataUri ?? undefined;
        message.frameTimestampUs = object.frameTimestampUs ?? undefined;
        message.isVertical = object.isVertical ?? undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/service_integrity_dimensions.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "youtube.api.pfiinnertube";
function createBaseServiceIntegrityDimensions() {
    return { poToken: undefined };
}
export const ServiceIntegrityDimensions = {
    encode(message, writer = new BinaryWriter()) {
        if (message.poToken !== undefined) {
            writer.uint32(10).bytes(message.poToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceIntegrityDimensions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.poToken = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { poToken: isSet(object.poToken) ? bytesFromBase64(object.poToken) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.poToken !== undefined) {
            obj.poToken = base64FromBytes(message.poToken);
        }
        return obj;
    },
    create(base) {
        return ServiceIntegrityDimensions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServiceIntegrityDimensions();
        message.poToken = object.poToken ?? undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}

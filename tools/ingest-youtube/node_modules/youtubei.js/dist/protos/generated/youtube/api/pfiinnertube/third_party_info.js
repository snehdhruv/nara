// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: youtube/api/pfiinnertube/third_party_info.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "youtube.api.pfiinnertube";
function createBaseThirdPartyInfo() {
    return {
        developerKey: undefined,
        appName: undefined,
        appPublisher: undefined,
        embedUrl: undefined,
        appVersion: undefined,
        embeddedPlayerContext: undefined,
    };
}
export const ThirdPartyInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.developerKey !== undefined) {
            writer.uint32(10).string(message.developerKey);
        }
        if (message.appName !== undefined) {
            writer.uint32(18).string(message.appName);
        }
        if (message.appPublisher !== undefined) {
            writer.uint32(26).string(message.appPublisher);
        }
        if (message.embedUrl !== undefined) {
            writer.uint32(34).string(message.embedUrl);
        }
        if (message.appVersion !== undefined) {
            writer.uint32(50).string(message.appVersion);
        }
        if (message.embeddedPlayerContext !== undefined) {
            ThirdPartyInfo_EmbeddedPlayerContext.encode(message.embeddedPlayerContext, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseThirdPartyInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.developerKey = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appPublisher = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.embedUrl = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.embeddedPlayerContext = ThirdPartyInfo_EmbeddedPlayerContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            developerKey: isSet(object.developerKey) ? globalThis.String(object.developerKey) : undefined,
            appName: isSet(object.appName) ? globalThis.String(object.appName) : undefined,
            appPublisher: isSet(object.appPublisher) ? globalThis.String(object.appPublisher) : undefined,
            embedUrl: isSet(object.embedUrl) ? globalThis.String(object.embedUrl) : undefined,
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : undefined,
            embeddedPlayerContext: isSet(object.embeddedPlayerContext)
                ? ThirdPartyInfo_EmbeddedPlayerContext.fromJSON(object.embeddedPlayerContext)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.developerKey !== undefined) {
            obj.developerKey = message.developerKey;
        }
        if (message.appName !== undefined) {
            obj.appName = message.appName;
        }
        if (message.appPublisher !== undefined) {
            obj.appPublisher = message.appPublisher;
        }
        if (message.embedUrl !== undefined) {
            obj.embedUrl = message.embedUrl;
        }
        if (message.appVersion !== undefined) {
            obj.appVersion = message.appVersion;
        }
        if (message.embeddedPlayerContext !== undefined) {
            obj.embeddedPlayerContext = ThirdPartyInfo_EmbeddedPlayerContext.toJSON(message.embeddedPlayerContext);
        }
        return obj;
    },
    create(base) {
        return ThirdPartyInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseThirdPartyInfo();
        message.developerKey = object.developerKey ?? undefined;
        message.appName = object.appName ?? undefined;
        message.appPublisher = object.appPublisher ?? undefined;
        message.embedUrl = object.embedUrl ?? undefined;
        message.appVersion = object.appVersion ?? undefined;
        message.embeddedPlayerContext =
            (object.embeddedPlayerContext !== undefined && object.embeddedPlayerContext !== null)
                ? ThirdPartyInfo_EmbeddedPlayerContext.fromPartial(object.embeddedPlayerContext)
                : undefined;
        return message;
    },
};
function createBaseThirdPartyInfo_EmbeddedPlayerContext() {
    return { ancestorOrigins: undefined, embeddedPlayerEncryptedContext: undefined, ancestorOriginsSupported: undefined };
}
export const ThirdPartyInfo_EmbeddedPlayerContext = {
    encode(message, writer = new BinaryWriter()) {
        if (message.ancestorOrigins !== undefined) {
            writer.uint32(10).string(message.ancestorOrigins);
        }
        if (message.embeddedPlayerEncryptedContext !== undefined) {
            writer.uint32(18).string(message.embeddedPlayerEncryptedContext);
        }
        if (message.ancestorOriginsSupported !== undefined) {
            writer.uint32(24).bool(message.ancestorOriginsSupported);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseThirdPartyInfo_EmbeddedPlayerContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ancestorOrigins = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.embeddedPlayerEncryptedContext = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.ancestorOriginsSupported = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ancestorOrigins: isSet(object.ancestorOrigins) ? globalThis.String(object.ancestorOrigins) : undefined,
            embeddedPlayerEncryptedContext: isSet(object.embeddedPlayerEncryptedContext)
                ? globalThis.String(object.embeddedPlayerEncryptedContext)
                : undefined,
            ancestorOriginsSupported: isSet(object.ancestorOriginsSupported)
                ? globalThis.Boolean(object.ancestorOriginsSupported)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ancestorOrigins !== undefined) {
            obj.ancestorOrigins = message.ancestorOrigins;
        }
        if (message.embeddedPlayerEncryptedContext !== undefined) {
            obj.embeddedPlayerEncryptedContext = message.embeddedPlayerEncryptedContext;
        }
        if (message.ancestorOriginsSupported !== undefined) {
            obj.ancestorOriginsSupported = message.ancestorOriginsSupported;
        }
        return obj;
    },
    create(base) {
        return ThirdPartyInfo_EmbeddedPlayerContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseThirdPartyInfo_EmbeddedPlayerContext();
        message.ancestorOrigins = object.ancestorOrigins ?? undefined;
        message.embeddedPlayerEncryptedContext = object.embeddedPlayerEncryptedContext ?? undefined;
        message.ancestorOriginsSupported = object.ancestorOriginsSupported ?? undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
